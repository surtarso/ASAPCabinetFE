name: C++ Compile Test

on:
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/compile_test.yml"
      - "src/**"                      # Watch all source files
      - "CMakeLists.txt"              # Watch CMakeLists.txt
      - "external/imgui/**"           # Watch ImGui files
      - "external/ImGuiFileDialog/**" # Watch ImGuiFileDialog files
      - "external/nlohmann/**"        # Watch Nlohmann Json files
      - "version.h.in"                # IMPORTANT: Watch this too!
  pull_request:
    branches: [ "main" ]

jobs:
  compile_app:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        # Fetch tags to ensure `git describe` works correctly for versioning
        fetch-depth: 0

    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev libsdl2-mixer-dev libvlc-dev libvlccore-dev libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libglew-dev xdotool imagemagick

    - name: Configure with CMake
      run: |
        mkdir build && cd build
        # Define an install prefix for the artifact
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install_root ..

    - name: Compile with CMake
      run: |
        cd build
        make -j$(nproc)

    - name: Run `make install` to package the application
      run: |
        cd build
        cmake --install . # This uses the CMAKE_INSTALL_PREFIX set during configure

    - name: Create distributable archive
      run: |
        cd ${GITHUB_WORKSPACE}/install_root
        # Get version from generated header for filename
        VERSION=$(grep '#define ASAPCABINETFE_VERSION_STRING' bin/ASAPCabinetFE | cut -d'"' -f2) # Read version from generated executable string
        # Fallback if the above fails (e.g., if executable is not built yet or string isn't found)
        if [ -z "$VERSION" ]; then
            VERSION=$(grep "project(ASAPCabinetFE LANGUAGES" ${GITHUB_WORKSPACE}/CMakeLists.txt | sed 's/.*ASAPCabinetFE //;s/ LANGUAGES.*//' | tr -d '\n')
            if [ -z "$VERSION" ]; then # If project version not found either
                VERSION=$(git describe --tags --always --dirty="-dirty" || echo "unknown")
            fi
        fi

        tar -czvf ASAPCabinetFE-${VERSION}-linux-x64.tar.gz ./*

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ASAPCabinetFE-linux-x64
        path: install_root/ASAPCabinetFE-*.tar.gz
        # Optional: You can upload individual files or the whole directory
        # path: install_root/bin/ASAPCabinetFE
        # path: install_root/share/ASAPCabinetFE/
        # path: install_root/ASAPCabinetFE-*.tar.gz

    - name: Test Version Flag
      run: |
       # Get the version directly from the generated executable
        VERSION_OUTPUT=$(./build/ASAPCabinetFE --version)
        # We can't easily predict the exact Git-derived version string for EXPECTED_OUTPUT
        # so we'll just check if it contains the project name and 'version' keyword.
        if echo "$VERSION_OUTPUT" | grep -q "ASAPCabinetFE version"; then
          echo "Version check passed: $VERSION_OUTPUT"
        else
          echo "Version check failed!"
          echo "Got: $VERSION_OUTPUT"
          exit 1
        fi