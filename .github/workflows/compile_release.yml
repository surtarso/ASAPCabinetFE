# .github/workflows/compile_release.yml
name: Release C++ Compile

on:
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/compile_release.yml"
      - "src/**"
      - "CMakeLists.txt"
      - "external/**"
      - "version.h.in"
      - "apt-packages.txt"
      - "Doxyfile"
      - "docs/**"
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

# Doxygen permissions for github pages
permissions:
  contents: write # Allows the workflow to push to the gh-pages branch
  pages: write    # Required for GitHub Pages deployment
  id-token: write # Required for GitHub Pages deployment
# End Doxygen permissions for github pages

jobs:
  compile_release:
    runs-on: ubuntu-latest
    container: ubuntu:20.04

    environment:
      name: github-pages

    steps:
      # Install Git before checking out the code, as actions/checkout needs it for submodules.
    - name: Install Git in Container
      run: |
        apt-get update
        apt-get install -y git findutils
        rm -rf /var/lib/apt/lists/* # Clean up to save space

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    # --- Start APT Caching ---
    - name: Prepare APT cache directories for caching
      run: |
        echo "Preparing /var/lib/apt/lists/ and /var/cache/apt/archives/ for caching..."
        rm -rf /var/lib/apt/lists/* || true
        rm -rf /var/cache/apt/archives/* || true
        mkdir -p /var/lib/apt/lists/ || true
        mkdir -p /var/cache/apt/archives/ || true
        # Change ownership to the runner user for full control during cache operations
        chown -R "${USER:-$(whoami)}:${USER:-$(whoami)}" /var/lib/apt/lists/ || true
        chown -R "${USER:-$(whoami)}:${USER:-$(whoami)}" /var/cache/apt/archives/ || true
        # Ensure full read/write/execute permissions for all
        chmod -R 777 /var/lib/apt/lists/ || true
        chmod -R 777 /var/cache/apt/archives/ || true
        rm -f /var/lib/apt/lists/lock || true
        rm -f /var/cache/apt/archives/lock || true

    - name: Cache APT packages
      id: apt-cache
      uses: actions/cache@v4
      with:
        path: |
          /var/lib/apt/lists/
          /var/cache/apt/archives/
        key: ${{ runner.os }}-apt-${{ hashFiles('apt-packages.txt') }}-v3
        restore-keys: |
          ${{ runner.os }}-apt-

    # --- End APT Caching ---

    - name: Install System Dependencies
      run: |
        # Set DEBIAN_FRONTEND to noninteractive to prevent prompts
        export DEBIAN_FRONTEND=noninteractive
        
        # Only run update if the cache was missed or partially restored
        if [ "${{ steps.apt-cache.outputs.cache-hit }}" != "true" ]; then
          echo "APT cache miss, running apt-get update..."
          apt-get update
        else
          echo "APT cache hit, skipping apt-get update."
        fi

        cat apt-packages.txt | xargs apt-get install -y -qq

    # --- Start of Doxygen Documentation Steps ---
    - name: Install Doxygen and Graphviz
      run: |
        apt-get install -y doxygen graphviz

    - name: Generate Doxygen documentation
      run: doxygen Doxyfile # Assumes Doxyfile is in the root of your repo

    - name: Create .nojekyll file
      # This creates an empty file named .nojekyll inside your Doxygen HTML output directory
      run: touch docs/html/.nojekyll

    - name: Configure GitHub Pages deployment
      # IMPORTANT: 'path' MUST match your Doxyfile's OUTPUT_DIRECTORY/HTML_OUTPUT
      # Example: If Doxyfile has OUTPUT_DIRECTORY = docs and HTML_OUTPUT = html
      # then path: docs/html
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/html # <--- **ADJUST THIS PATH** to your actual Doxygen HTML output

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    # --- End of Doxygen Documentation Steps ---

    - name: Configure with CMake
      run: |
        mkdir -p "${GITHUB_WORKSPACE}/build" && cd "${GITHUB_WORKSPACE}/build"
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install_root ..

    - name: Compile with CMake
      run: |
        cd "${GITHUB_WORKSPACE}/build"
        make -j$(nproc)

    - name: Run `make install` to package the application
      run: |
        cd "${GITHUB_WORKSPACE}/build"
        cmake --install .

    - name: Create distributable archive
      id: create-archive
      run: |
        VERSION=$(git describe --tags --always --dirty="-dirty" --abbrev=7)
        if [ -z "$VERSION" ]; then
            VERSION="unknown-$(date +%Y%m%d%H%M%S)"
        fi

        TARBALL_NAME="ASAPCabinetFE-${VERSION}-linux-x64.tar.gz"
        # Define a temporary path outside GITHUB_WORKSPACE for the artifact
        ARTIFACT_TEMP_DIR="${RUNNER_TEMP}/artifacts"
        mkdir -p "${ARTIFACT_TEMP_DIR}"
        TARBALL_FULL_PATH="${ARTIFACT_TEMP_DIR}/${TARBALL_NAME}"

        echo "Creating archive ${TARBALL_NAME} at ${TARBALL_FULL_PATH}"
        
        # Change directory to install_root to ensure clean tarball contents
        cd "${HOME}/ASAPCabinetFE"
        # Create the tarball in the temporary directory
        tar -czvf "${TARBALL_FULL_PATH}" ./*
        
        echo "tarball_name=${TARBALL_NAME}" >> "$GITHUB_OUTPUT"
        
        echo "DEBUG: Checking for created tarball at ${TARBALL_FULL_PATH}"
        ls -l "${TARBALL_FULL_PATH}" || { echo "ERROR: Tarball not found after creation attempt!"; exit 1; }
        echo "DEBUG: Contents of temporary artifact directory:"
        ls -l "${ARTIFACT_TEMP_DIR}"
        echo "DEBUG: Contents of workspace root (just to be sure):"
        ls -l "${GITHUB_WORKSPACE}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ASAPCabinetFE-linux-x64
        # Upload from the temporary directory
        path: "${{ runner.temp }}/artifacts/${{ steps.create-archive.outputs.tarball_name }}"
        retention-days: 7

    - name: Test Version Flag
      run: |
        cd "${HOME}/ASAPCabinetFE"
        VERSION_OUTPUT=$(./ASAPCabinetFE --version)
        if echo "$VERSION_OUTPUT" | grep -q "ASAPCabinetFE version"; then
          echo "Version check passed: $VERSION_OUTPUT"
        else
          echo "Version check failed!"
          echo "Got: $VERSION_OUTPUT"
          exit 1
        fi
    
    # Create a Github Release based on Tag pushes to main
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }} # The tag name (e.g., v1.0.0)
        name: Release ${{ github.ref_name }} # The release title
        body: |
          Automated release for ${{ github.ref_name }}
          
          This release includes the compiled Linux x64 artifact.
        draft: false # Set to true to create a draft release
        prerelease: false # Set to true for pre-release versions
        files: ${{ steps.create-archive.outputs.tarball_full_path }} # Path to the compiled archive
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Automatically provided by GitHub Actions
