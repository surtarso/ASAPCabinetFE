# .github/workflows/compile_release.yml
name: Release C++ Compile

on:
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/compile_release.yml"
      - "src/**"
      - "CMakeLists.txt"
      - "external/**"
      - "version.h.in"
      - "apt-packages.txt"
      - "Doxyfile"
      - "docs/**"
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

# --- Doxygen permissions for github pages ---
permissions:
  contents: write # Allows the workflow to push to the gh-pages branch
  pages: write    # Required for GitHub Pages deployment
  id-token: write # Required for GitHub Pages deployment

jobs:
  compile_release:
    runs-on: ubuntu-latest
    environment:
      name: github-pages 

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        lfs: true # Enable Git LFS to fetch actual files instead of links

    # --- System requirements ---
    - name: Install System Dependencies
      run: |
        # Make sure core packages are installed for CI
        sudo apt-get update
        sudo apt-get install findutils apt-utils git doxygen graphviz -y -qq
        
        # Tell git to trust workspace dir
        git config --global --add safe.directory "${GITHUB_WORKSPACE}"
        
        # Install App Specific Dependencies
        cat apt-packages.txt | xargs sudo apt-get install -y -qq

    - name: Get Library Versions for Release Tag
      if: startsWith(github.ref, 'refs/tags/')
      id: get-lib-versions
      run: |
        SDL2_VER=$(pkg-config --modversion sdl2 || echo "N/A")
        FFMPEG_VER=$(pkg-config --modversion libavcodec || echo "N/A")
        VLC_VER=$(pkg-config --modversion libvlc || echo "N/A")
        GSTREAMER_VER=$(pkg-config --modversion gstreamer-1.0 || echo "N/A")
        CURL_VER=$(pkg-config --modversion libcurl || echo "N/A")
        # Get GLIBC version
        GLIBC_VER=$(ldd --version 2>&1 | head -n 1 | awk '{print $NF}' || echo "N/A")

        echo "SDL2_VERSION=$SDL2_VER" >> $GITHUB_ENV
        echo "FFMPEG_VERSION=$FFMPEG_VER" >> $GITHUB_ENV
        echo "VLC_VERSION=$VLC_VER" >> $GITHUB_ENV
        echo "GSTREAMER_VERSION=$GSTREAMER_VER" >> $GITHUB_ENV
        echo "CURL_VERSION=$CURL_VER" >> $GITHUB_ENV
        echo "GLIBC_VERSION=$GLIBC_VER" >> $GITHUB_ENV # Set GLIBC version as env var
        echo "Detected SDL2 Version: $SDL2_VER"
        echo "Detected FFmpeg Version: $FFMPEG_VER"
        echo "Detected VLC Version: $VLC_VER"
        echo "Detected GStreamer Version: $GSTREAMER_VER"
        echo "Detected cURL Version: $CURL_VER"
        echo "Detected GLIBC Version: $GLIBC_VER"

    # --- Doxygen Documentation Steps ---
    - name: Generate Doxygen documentation
      run: doxygen Doxyfile # Doxyfile in the root repo

    - name: Create .nojekyll file
      run: touch docs/html/.nojekyll

    - name: Configure GitHub Pages deployment
      # IMPORTANT: 'path' MUST match Doxyfile's OUTPUT_DIRECTORY/HTML_OUTPUT
      # Example: If Doxyfile has OUTPUT_DIRECTORY = docs and HTML_OUTPUT = html
      # then path: docs/html
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/html # Doxygen HTML output

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    # --- Compilation ---
    - name: Configure with CMake
      run: |
        mkdir -p "${GITHUB_WORKSPACE}/build" && cd "${GITHUB_WORKSPACE}/build"
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install_root ..

    - name: Compile with CMake
      run: |
        cd "${GITHUB_WORKSPACE}/build"
        cmake --build . -j$(nproc)

    - name: Run `make install` for packaging
      run: |
        cd "${GITHUB_WORKSPACE}/build"
        cmake --install .

    # --- Create and Upload artifact ---
    - name: Create distributable archive
      id: create-archive
      run: |
        VERSION=$(git describe --tags --always --dirty="-dirty" --abbrev=7)
        if [ -z "$VERSION" ]; then
            VERSION="unknown-$(date +%Y%m%d%H%M%S)"
        fi
        TARBALL_NAME="ASAPCabinetFE-${VERSION}-linux-x64.tar.gz"
        
        # Define a temporary path outside GITHUB_WORKSPACE for the artifact
        ARTIFACT_TEMP_DIR="${RUNNER_TEMP}/artifacts"
        mkdir -p "${ARTIFACT_TEMP_DIR}"
        TARBALL_FULL_PATH="${ARTIFACT_TEMP_DIR}/${TARBALL_NAME}"
        echo "Creating archive ${TARBALL_NAME} at ${TARBALL_FULL_PATH}"
        
        # Change directory to make install target to ensure clean tarball contents
        cd "${HOME}/ASAPCabinetFE"
        # Create the tarball in the temporary directory
        tar -czvhf "${TARBALL_FULL_PATH}" ./*
        
        echo "tarball_name=${TARBALL_NAME}" >> "$GITHUB_OUTPUT"
        echo "tarball_full_path=${TARBALL_FULL_PATH}" >> "$GITHUB_OUTPUT"
        
        echo "DEBUG: Checking for created tarball at ${TARBALL_FULL_PATH}"
        ls -l "${TARBALL_FULL_PATH}" || { echo "ERROR: Tarball not found after creation attempt!"; exit 1; }
        echo "DEBUG: Contents of temporary artifact directory:"
        ls -l "${ARTIFACT_TEMP_DIR}"
        echo "DEBUG: Contents of workspace root (just to be sure):"
        ls -l "${GITHUB_WORKSPACE}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ASAPCabinetFE-linux-x64
        path: "${{ runner.temp }}/artifacts/${{ steps.create-archive.outputs.tarball_name }}"
        retention-days: 7

    # --- Test binary ---
    - name: Test Version Flag
      run: |
        cd "${HOME}/ASAPCabinetFE"
        VERSION_OUTPUT=$(./ASAPCabinetFE --version)
        if echo "$VERSION_OUTPUT" | grep -q "ASAPCabinetFE version"; then
          echo "Version check passed: $VERSION_OUTPUT"
        else
          echo "Version check failed!"
          echo "Got: $VERSION_OUTPUT"
          exit 1
        fi
    
    # --- Create a Github Release on Tag pushes ---
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }} # The tag name (e.g., v1.0.0)
        name: ASAPCabinetFE Release ${{ github.ref_name }} # The release title
        body: |
          ### _As Simple As Possible Cabinet Front-End_ release ${{ github.ref_name }}
          
          This release includes the Linux x64 artifact, compiled using:
          - GLIBC: ${{ env.GLIBC_VERSION }}
          - SDL2: ${{ env.SDL2_VERSION }}
          - FFmpeg (libavcodec): ${{ env.FFMPEG_VERSION }}
          - VLC (libvlc): ${{ env.VLC_VERSION }}
          - GStreamer: ${{ env.GSTREAMER_VERSION }}
          - cURL: ${{ env.CURL_VERSION }}

          Unpack and run `./ASAPCabinetFE` 
          Please refer to the [User's Manual](https://github.com/surtarso/ASAPCabinetFE/blob/main/UserManual.md)

          **Changes**:
            - This is an automated release, this will be filled soon.
          
          **Fixes**:
            - This is an automated release, this will be filled soon.

          **Known bugs**:
            - This is an automated release, this will be filled soon.

          **Full Changelog**: https://github.com/surtarso/ASAPCabinetFE/commits/${{ github.ref_name }}
        draft: false # Set to true to create a draft release
        prerelease: false # Set to true for pre-release versions
        files: ${{ steps.create-archive.outputs.tarball_full_path }} # Path to the compiled archive
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Automatically provided by GitHub Actions
