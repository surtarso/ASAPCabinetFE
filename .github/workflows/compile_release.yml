# .github/workflows/compile_release.yml
name: Release C++ Compile

on:
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/compile_release.yml"
      - "src/**"                      # Watch all source files
      - "CMakeLists.txt"              # Watch CMakeLists.txt
      - "external/imgui/**"           # Watch ImGui files
      - "external/ImGuiFileDialog/**" # Watch ImGuiFileDialog files
      - "external/nlohmann/**"        # Watch Nlohmann Json files
      - "version.h.in"                # IMPORTANT: Watch this too!
      - "apt-packages.txt"            # Watch the list of APT dependencies for caching
  pull_request:
    branches: [ "main" ]

jobs:
  compile_release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    # --- Cache APT packages to speed up dependency installation ---
    - name: Cache APT packages
      uses: actions/cache@v4
      id: apt-cache # Add an ID to refer to this step's outputs
      with:
        path: |
          /var/lib/apt/lists/
          /var/cache/apt/archives/
        key: ${{ runner.os }}-apt-${{ hashFiles('apt-packages.txt') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install System Dependencies
      run: |
        # --- Crucial for caching: Ensure APT cache directories are readable by the runner ---
        # Do this *before* apt-get update to ensure proper permissions from the start
        sudo chmod -R a+rX /var/lib/apt/lists/ || true # Use || true to prevent job failure if path doesn't exist yet
        sudo chmod -R a+rX /var/cache/apt/archives/ || true
        sudo rm -f /var/lib/apt/lists/lock # Remove any lingering lock files
        sudo rm -f /var/cache/apt/archives/lock # Remove any lingering lock files

        # Update package lists (will be fast if cached)
        sudo apt-get update

        # Install packages from the apt-packages.txt file.
        # Check if cache was restored. If it was, maybe skip install if all packages are already in cache?
        # This is tricky because apt-get install -y will still 'install' (unpack) even if downloaded.
        # For now, let's keep it simple and just let apt-get install run.
        # It should be faster if downloads are skipped due to cache.
        cat apt-packages.txt | xargs sudo apt-get install -y

    - name: Configure with CMake
      run: |
        mkdir -p "${GITHUB_WORKSPACE}/build" && cd "${GITHUB_WORKSPACE}/build"
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install_root ..

    - name: Compile with CMake
      run: |
        cd "${GITHUB_WORKSPACE}/build"
        make -j$(nproc)

    - name: Run `make install` to package the application
      run: |
        cd "${GITHUB_WORKSPACE}/build"
        cmake --install .

    - name: Create distributable archive
      run: |
        # Get the version string
        VERSION=$(git describe --tags --always --dirty="-dirty" --abbrev=7)
        if [ -z "$VERSION" ]; then
            VERSION="unknown-$(date +%Y%m%d%H%M%S)"
        fi

        # Debugging: Print the version used
        echo "DEBUG: Version determined: ${VERSION}"

        # Define the full path for the tarball, explicitly in the workspace root
        TARBALL_NAME="ASAPCabinetFE-${VERSION}-linux-x64.tar.gz"
        TARBALL_FULL_PATH="${GITHUB_WORKSPACE}/${TARBALL_NAME}"

        echo "Creating archive ${TARBALL_NAME} at ${TARBALL_FULL_PATH}"
        
        # Change directory to the workspace root.
        cd "${GITHUB_WORKSPACE}"
        # Tar the 'install_root' directory. This ensures the output is in GITHUB_WORKSPACE.
        # The content of the tarball will be 'install_root/...'
        tar -czvf "${TARBALL_FULL_PATH}" ./install_root
        
        # Debugging: Check if the file was created and its permissions
        echo "DEBUG: Checking for created tarball at ${TARBALL_FULL_PATH}"
        ls -l "${TARBALL_FULL_PATH}" || { echo "ERROR: Tarball not found after creation attempt!"; exit 1; }
        echo "DEBUG: Contents of workspace root:"
        ls -l "${GITHUB_WORKSPACE}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ASAPCabinetFE-linux-x64
        path: "${GITHUB_WORKSPACE}/ASAPCabinetFE-*-linux-x64.tar.gz"
        # Add a timeout for the upload to prevent indefinite hangs
        retention-days: 7 # Optional: Set how long to keep the artifact

    - name: Test Version Flag
      run: |
        cd "${GITHUB_WORKSPACE}"
        VERSION_OUTPUT=$(./build/ASAPCabinetFE --version)
        if echo "$VERSION_OUTPUT" | grep -q "ASAPCabinetFE version"; then
          echo "Version check passed: $VERSION_OUTPUT"
        else
          echo "Version check failed!"
          echo "Got: $VERSION_OUTPUT"
          exit 1
        fi