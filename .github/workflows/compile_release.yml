# .github/workflows/compile_release.yml
name: Release C++ Compile

on:
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/compile_release.yml"
      - "src/**"
      - "CMakeLists.txt"
      - "external/**"
      - "version.h.in"
      - "apt-packages.txt"
  pull_request:
    branches: [ "main" ]

jobs:
  compile_release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    # --- NEW: Ensure APT cache directories are clean and writable before caching ---
    # This step is crucial to prevent "Permission denied" and "File exists" errors
    # during the cache restoration phase by the actions/cache action itself.
    - name: Prepare APT cache directories for caching
      run: |
        echo "Preparing /var/lib/apt/lists/ and /var/cache/apt/archives/ for caching..."
        # Aggressively remove all contents
        sudo rm -rf /var/lib/apt/lists/* || true
        sudo rm -rf /var/cache/apt/archives/* || true
        # Ensure the directories exist and are writable by all (including the runner user)
        sudo mkdir -p /var/lib/apt/lists/ || true
        sudo mkdir -p /var/cache/apt/archives/ || true
        sudo chmod -R 777 /var/lib/apt/lists/ || true
        sudo chmod -R 777 /var/cache/apt/archives/ || true
        # Remove any lingering lock files that might interfere
        sudo rm -f /var/lib/apt/lists/lock || true
        sudo rm -f /var/cache/apt/archives/lock || true

    - name: Cache APT packages
      id: apt-cache
      uses: actions/cache@v4
      with:
        path: |
          /var/lib/apt/lists/
          /var/cache/apt/archives/
        key: ${{ runner.os }}-apt-${{ hashFiles('apt-packages.txt') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install System Dependencies
      run: |
        sudo apt-get update 
        cat apt-packages.txt | xargs sudo apt-get install -y

    - name: Configure with CMake
      run: |
        mkdir -p "${GITHUB_WORKSPACE}/build" && cd "${GITHUB_WORKSPACE}/build"
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install_root ..

    - name: Compile with CMake
      run: |
        cd "${GITHUB_WORKSPACE}/build"
        make -j$(nproc)

    - name: Run `make install` to package the application
      run: |
        cd "${GITHUB_WORKSPACE}/build"
        cmake --install .

    - name: Create distributable archive
      id: create-archive
      run: |
        VERSION=$(git describe --tags --always --dirty="-dirty" --abbrev=7)
        if [ -z "$VERSION" ]; then
            VERSION="unknown-$(date +%Y%m%d%H%M%S)"
        fi

        TARBALL_NAME="ASAPCabinetFE-${VERSION}-linux-x64.tar.gz"
        TARBALL_FULL_PATH="${GITHUB_WORKSPACE}/${TARBALL_NAME}"

        echo "Creating archive ${TARBALL_NAME} at ${TARBALL_FULL_PATH}"
        
        cd "${GITHUB_WORKSPACE}"
        tar -czvf "${TARBALL_FULL_PATH}" ./install_root
        
        echo "tarball_name=${TARBALL_NAME}" >> "$GITHUB_OUTPUT"
        
        echo "DEBUG: Checking for created tarball at ${TARBALL_FULL_PATH}"
        ls -l "${TARBALL_FULL_PATH}" || { echo "ERROR: Tarball not found after creation attempt!"; exit 1; }
        echo "DEBUG: Contents of workspace root:"
        ls -l "${GITHUB_WORKSPACE}"

        # --- NEW: Add a short delay to ensure file system consistency ---
        echo "Adding a short delay before artifact upload..."
        sleep 5 # Wait for 5 seconds

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ASAPCabinetFE-linux-x64
        path: "${GITHUB_WORKSPACE}/${{ steps.create-archive.outputs.tarball_name }}"
        retention-days: 7

    - name: Test Version Flag
      run: |
        cd "${GITHUB_WORKSPACE}"
        VERSION_OUTPUT=$(./build/ASAPCabinetFE --version)
        if echo "$VERSION_OUTPUT" | grep -q "ASAPCabinetFE version"; then
          echo "Version check passed: $VERSION_OUTPUT"
        else
          echo "Version check failed!"
          echo "Got: $VERSION_OUTPUT"
          exit 1
        fi