name: Release C++ Compile

on:
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/compile_release.yml"
      - "src/**"                      # Watch all source files
      - "CMakeLists.txt"              # Watch CMakeLists.txt
      - "external/imgui/**"           # Watch ImGui files
      - "external/ImGuiFileDialog/**" # Watch ImGuiFileDialog files
      - "external/nlohmann/**"        # Watch Nlohmann Json files
      - "version.h.in"                # IMPORTANT: Watch this too!
  pull_request:
    branches: [ "main" ]

jobs:
  compile_release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        # Fetch tags to ensure `git describe` works correctly for versioning
        fetch-depth: 0 # Crucial for `git describe` to work on tags

    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev libsdl2-mixer-dev libvlc-dev libvlccore-dev libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libglew-dev xdotool imagemagick

    - name: Configure with CMake
      run: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install_root ..

    - name: Compile with CMake
      run: |
        cd build
        make -j$(nproc)

    - name: Run `make install` to package the application
      run: |
        cd build
        cmake --install . # This uses the CMAKE_INSTALL_PREFIX set during configure

    - name: Create distributable archive
      run: |
        cd "${GITHUB_WORKSPACE}/install_root"
        
        # Get the version string using git describe.
        # This will be the most accurate reflection of the version at the commit.
        # --abbrev=7 gives a short hash. -dirty indicates uncommitted changes.
        VERSION=$(git describe --tags --always --dirty="-dirty" --abbrev=7)
        
        # Fallback if git describe fails for any reason (though unlikely with fetch-depth:0)
        if [ -z "$VERSION" ]; then
            VERSION="unknown-$(date +%Y%m%d%H%M%S)" # Fallback to timestamp if Git fails
        fi

        echo "Creating archive ASAPCabinetFE-${VERSION}-linux-x64.tar.gz"
        # Tar the current directory ('.') - this is the key fix!
        tar -czvf ASAPCabinetFE-"${VERSION}"-linux-x64.tar.gz .
        # Using quotes around "${VERSION}" to handle potential special characters in version string

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ASAPCabinetFE-linux-x64
        # Use a wildcard here since the version string will be dynamic
        path: "${GITHUB_WORKSPACE}/install_root/ASAPCabinetFE-*-linux-x64.tar.gz"

    - name: Test Version Flag
      run: |
       # Get the version directly from the generated executable
        VERSION_OUTPUT=$(./build/ASAPCabinetFE --version)
        # We'll just check if it contains the project name and 'version' keyword.
        if echo "$VERSION_OUTPUT" | grep -q "ASAPCabinetFE version"; then
          echo "Version check passed: $VERSION_OUTPUT"
        else
          echo "Version check failed!"
          echo "Got: $VERSION_OUTPUT"
          exit 1
        fi