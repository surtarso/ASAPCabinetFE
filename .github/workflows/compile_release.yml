# .github/workflows/compile_release.yml
name: Release C++ Compile

on:
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/compile_release.yml"
      - "src/**"                      # Watch all source files
      - "CMakeLists.txt"              # Watch CMakeLists.txt
      - "external/imgui/**"           # Watch ImGui files
      - "external/ImGuiFileDialog/**" # Watch ImGuiFileDialog files
      - "external/nlohmann/**"        # Watch Nlohmann Json files
      - "version.h.in"                # IMPORTANT: Watch this too!
      - "apt-packages.txt"            # Watch the list of APT dependencies for caching
  pull_request:
    branches: [ "main" ]

jobs:
  compile_release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        # Fetch tags to ensure `git describe` works correctly for versioning
        fetch-depth: 0 # Crucial for `git describe` to work on tags

    # --- Cache APT packages to speed up dependency installation ---
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: |
          /var/lib/apt/lists/
          /var/cache/apt/archives/
        key: ${{ runner.os }}-apt-${{ hashFiles('apt-packages.txt') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install System Dependencies
      run: |
        sudo apt-get update
        cat apt-packages.txt | xargs sudo apt-get install -y
        
        # --- Crucial for caching: Ensure APT cache directories are readable by the runner ---
        sudo chmod -R a+rX /var/lib/apt/lists/
        sudo chmod -R a+rX /var/cache/apt/archives/
        sudo rm -f /var/lib/apt/lists/lock
        sudo rm -f /var/cache/apt/archives/lock

    - name: Configure with CMake
      run: |
        # Use a consistent build directory, ensure it's within the workspace
        mkdir -p "${GITHUB_WORKSPACE}/build" && cd "${GITHUB_WORKSPACE}/build"
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install_root ..

    - name: Compile with CMake
      run: |
        # Change to the build directory
        cd "${GITHUB_WORKSPACE}/build"
        make -j$(nproc)

    - name: Run `make install` to package the application
      run: |
        # Change to the build directory
        cd "${GITHUB_WORKSPACE}/build"
        cmake --install . # This uses the CMAKE_INSTALL_PREFIX set during configure

    - name: Create distributable archive
      run: |
        # Get the version string
        VERSION=$(git describe --tags --always --dirty="-dirty" --abbrev=7)
        if [ -z "$VERSION" ]; then
            VERSION="unknown-$(date +%Y%m%d%H%M%S)"
        fi

        # Define the full path for the tarball, explicitly in the workspace root
        TARBALL_NAME="ASAPCabinetFE-${VERSION}-linux-x64.tar.gz"
        TARBALL_FULL_PATH="${GITHUB_WORKSPACE}/${TARBALL_NAME}"

        echo "Creating archive ${TARBALL_NAME} at ${TARBALL_FULL_PATH}"
        
        # Change directory to the workspace root, then explicitly tar the 'install_root' directory.
        # This is the most reliable way to create the tarball without conflicts
        # and ensure it's in the root of the workspace.
        cd "${GITHUB_WORKSPACE}"
        tar -czvf "${TARBALL_FULL_PATH}" ./install_root
        # This will create a tarball where the top-level directory inside is 'install_root/'.
        # E.g., tar -tf ASAPCabinetFE-...tar.gz would show:
        # install_root/
        # install_root/bin/
        # install_root/bin/ASAPCabinetFE
        # ... and so on.

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ASAPCabinetFE-linux-x64
        # This path is now definitively where the tarball will be.
        path: "${GITHUB_WORKSPACE}/ASAPCabinetFE-*-linux-x64.tar.gz"

    - name: Test Version Flag
      run: |
       # Ensure we are in the main workspace directory or specify full path
        cd "${GITHUB_WORKSPACE}"
       # Get the version directly from the generated executable in the build directory
        VERSION_OUTPUT=$(./build/ASAPCabinetFE --version)
        # We'll just check if it contains the project name and 'version' keyword.
        if echo "$VERSION_OUTPUT" | grep -q "ASAPCabinetFE version"; then
          echo "Version check passed: $VERSION_OUTPUT"
        else
          echo "Version check failed!"
          echo "Got: $VERSION_OUTPUT"
          exit 1
        fi