# .github/workflows/compile_release.yml
name: Release C++ Compile

on:
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/compile_release.yml"
      - "src/**"                      # Watch all source files
      - "CMakeLists.txt"              # Watch CMakeLists.txt
      - "external/imgui/**"           # Watch ImGui files
      - "external/ImGuiFileDialog/**" # Watch ImGuiFileDialog files
      - "external/nlohmann/**"        # Watch Nlohmann Json files
      - "version.h.in"                # IMPORTANT: Watch this too!
      - "apt-packages.txt"            # Watch the list of APT dependencies for caching
  pull_request:
    branches: [ "main" ]

jobs:
  compile_release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        # Fetch tags to ensure `git describe` works correctly for versioning
        fetch-depth: 0 # Crucial for `git describe` to work on tags

    # --- Cache APT packages to speed up dependency installation ---
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: |
          /var/lib/apt/lists/
          /var/cache/apt/archives/
        # The key uses the OS and a hash of 'apt-packages.txt'.
        # If apt-packages.txt changes, the cache will be busted and rebuilt.
        key: ${{ runner.os }}-apt-${{ hashFiles('apt-packages.txt') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install System Dependencies
      run: |
        sudo apt-get update
        # Install packages from the apt-packages.txt file.
        # Make sure you create 'apt-packages.txt' in your repository root
        # with one package name per line (e.g., 'libsdl2-dev').
        cat apt-packages.txt | xargs sudo apt-get install -y

    - name: Configure with CMake
      run: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install_root ..

    - name: Compile with CMake
      run: |
        cd build
        make -j$(nproc)

    - name: Run `make install` to package the application
      run: |
        cd build
        cmake --install . # This uses the CMAKE_INSTALL_PREFIX set during configure

    - name: Create distributable archive
      run: |
        # IMPORTANT: Change directory to the workspace root before creating the tarball.
        # This prevents the "file changed as we read it" warning by creating the archive
        # outside the directory being compressed.
        cd "${GITHUB_WORKSPACE}"
        
        # Get the version string using git describe.
        # This will be the most accurate reflection of the version at the commit.
        # `--abbrev=7` gives a short hash. `-dirty` indicates uncommitted changes.
        VERSION=$(git describe --tags --always --dirty="-dirty" --abbrev=7)
        
        # Fallback if git describe fails for any reason (though unlikely with fetch-depth:0)
        if [ -z "$VERSION" ]; then
            # Using a timestamp as a robust fallback for the version name if Git fails
            VERSION="unknown-$(date +%Y%m%d%H%M%S)" 
        fi

        echo "Creating archive ASAPCabinetFE-${VERSION}-linux-x64.tar.gz"
        # Tar the 'install_root' directory.
        # Quotes around "${VERSION}" handle potential special characters in the version string.
        tar -czvf ASAPCabinetFE-"${VERSION}"-linux-x64.tar.gz ./install_root/

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ASAPCabinetFE-linux-x64
        # IMPORTANT: The tarball is now located directly in the workspace root.
        # This path correctly points to where the archive was created.
        path: "${GITHUB_WORKSPACE}/ASAPCabinetFE-*-linux-x64.tar.gz"

    - name: Test Version Flag
      run: |
       # Get the version directly from the generated executable
        VERSION_OUTPUT=$(./build/ASAPCabinetFE --version)
        # We'll just check if it contains the project name and 'version' keyword.
        if echo "$VERSION_OUTPUT" | grep -q "ASAPCabinetFE version"; then
          echo "Version check passed: $VERSION_OUTPUT"
        else
          echo "Version check failed!"
          echo "Got: $VERSION_OUTPUT"
          exit 1
        fi